package com.chillieman.chilliewallet.model.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ChillieToken extends Contract {
    public static final String BINARY = "6080604052600160035560096004556005805461ffff60a01b1916600160a01b179055600060068190556007556200003c6301e1338042620004e4565b6008556009805460ff19169055620000576012600a620005fe565b62000068906402540be40062000616565b600a553480156200007857600080fd5b50600b80546001600160a01b0319167310ed43c718714eb63d5aa57b78b54704e256024e9081179091556040805163c45a015560e01b815290516000929163c45a01559160048083019260209291908290030181865afa158015620000e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000107919062000638565b6001600160a01b031663c9c6539630600b60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000190919062000638565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015620001de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000204919062000638565b600c80546001600160a01b0319166001600160a01b03831617905590506200022f6012600a620005fe565b620002409064e8d4a5100062000616565b73775e3bbfb07496db8ed33a86df0e41345f11ea21600090815260208190527f416c8527612cf7bae78897db355f873232029215f9f3a718506f50f26edc5a46805490919062000292908490620004e4565b9091555073775e3bbfb07496db8ed33a86df0e41345f11ea21905060007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef620002de6012600a620005fe565b620002ef9064e8d4a5100062000616565b60405190815260200160405180910390a360026020527fd914d6ad20a85331496b3ddb97bf49529ec4bff403f5cb289d44f94c1d5730668054600160ff1991821681179092557f729b66228522214bfad73980a76db483fc247ed6d98abc312c089d8ee0ff00cb8054821683179055306000908152604080822080548416851790556001600160a01b038581168352912080549092169092179055600b54620003999116620003a0565b5062000663565b73775e3bbfb07496db8ed33a86df0e41345f11ea213314620004095760405162461bcd60e51b815260206004820181905260248201527f44656e6965643a2063616c6c6572206973206e6f74204368696c6c69656d616e60448201526064015b60405180910390fd5b6001600160a01b03811660009081526002602052604090205460ff1615620004745760405162461bcd60e51b815260206004820152601960248201527f45786368616e676520697320616c726561647920416464656400000000000000604482015260640162000400565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f3e535d1ab441ef41c268fd9b52b478aee02d693c5ca2a84b5d26b89e0922e5e1910160405180910390a150565b634e487b7160e01b600052601160045260246000fd5b60008219821115620004fa57620004fa620004ce565b500190565b600181815b8085111562000540578160001904821115620005245762000524620004ce565b808516156200053257918102915b93841c939080029062000504565b509250929050565b6000826200055957506001620005f8565b816200056857506000620005f8565b81600181146200058157600281146200058c57620005ac565b6001915050620005f8565b60ff841115620005a057620005a0620004ce565b50506001821b620005f8565b5060208310610133831016604e8410600b8410161715620005d1575081810a620005f8565b620005dd8383620004ff565b8060001904821115620005f457620005f4620004ce565b0290505b92915050565b60006200060f60ff84168362000548565b9392505050565b6000816000190483118215151615620006335762000633620004ce565b500290565b6000602082840312156200064b57600080fd5b81516001600160a01b03811681146200060f57600080fd5b612c5a80620006736000396000f3fe6080604052600436106102085760003560e01c80636b54acd911610118578063a6184940116100a0578063d2a5683e1161006f578063d2a5683e146105b5578063dd62ed3e146105c8578063e1bc5662146105e8578063e6c1909b146105fd578063fc6574501461061c57600080fd5b8063a61849401461053f578063a9059cbb14610560578063be74b86814610580578063c4ae7819146105a057600080fd5b8063859a0bd5116100e7578063859a0bd51461049d5780638a926d0f146104bd57806391f98f3f146104d257806395d89b41146104f2578063a457c2d71461051f57600080fd5b80636b54acd9146104355780636fff355a1461044a57806370a082311461045f57806379e182991461047f57600080fd5b806323b872dd1161019b578063395093511161016a57806339509351146103ac578063403cd288146103cc57806349bd5a5e146103ec57806350b7efff1461040a5780635373a1cc1461041f57600080fd5b806323b872dd1461033c5780632798d2461461035c5780632a772e581461037b578063313ce5671461039057600080fd5b806306fdde03116101d757806306fdde0314610286578063095ea7b3146102c55780631694505e146102f557806318160ddd1461032757600080fd5b8063018ccfc8146102145780630439456e1461023a57806305771f4d1461025c578063057f01211461027157600080fd5b3661020f57005b600080fd5b61022761022236600461255c565b610631565b6040519081526020015b60405180910390f35b34801561024657600080fd5b5061025a61025536600461258d565b610845565b005b34801561026857600080fd5b50600654610227565b34801561027d57600080fd5b50600754610227565b34801561029257600080fd5b5060408051808201909152600d81526c10da1a5b1b1a5955d85b1b195d609a1b60208201525b60405161023191906125b1565b3480156102d157600080fd5b506102e56102e0366004612606565b610936565b6040519015158152602001610231565b34801561030157600080fd5b50600b546001600160a01b03165b6040516001600160a01b039091168152602001610231565b34801561033357600080fd5b50610227610950565b34801561034857600080fd5b506102e5610357366004612632565b610972565b34801561036857600080fd5b50600554600160a81b900460ff166102e5565b34801561038757600080fd5b5061025a610996565b34801561039c57600080fd5b5060405160128152602001610231565b3480156103b857600080fd5b506102e56103c7366004612606565b610a24565b3480156103d857600080fd5b5061025a6103e736600461258d565b610a46565b3480156103f857600080fd5b50600c546001600160a01b031661030f565b34801561041657600080fd5b5061025a610b44565b34801561042b57600080fd5b50620faded61030f565b34801561044157600080fd5b5061025a610c75565b34801561045657600080fd5b5061025a610ec8565b34801561046b57600080fd5b5061022761047a36600461258d565b611044565b34801561048b57600080fd5b506005546001600160a01b031661030f565b3480156104a957600080fd5b5061025a6104b836600461258d565b61105f565b3480156104c957600080fd5b50600a54610227565b3480156104de57600080fd5b506102276104ed36600461255c565b611313565b3480156104fe57600080fd5b5060408051808201909152600481526310d2131360e21b60208201526102b8565b34801561052b57600080fd5b506102e561053a366004612606565b61148b565b34801561054b57600080fd5b50600080516020612c0583398151915261030f565b34801561056c57600080fd5b506102e561057b366004612606565b611506565b34801561058c57600080fd5b506102e561059b36600461255c565b611514565b3480156105ac57600080fd5b5061025a6115ac565b6102e56105c3366004612673565b611648565b3480156105d457600080fd5b506102276105e3366004612695565b6117fb565b3480156105f457600080fd5b50610227611826565b34801561060957600080fd5b50600554600160a01b900460ff166102e5565b34801561062857600080fd5b5061025a611836565b6005546000906001600160a01b031633146106675760405162461bcd60e51b815260040161065e906126ce565b60405180910390fd5b600082116106875760405162461bcd60e51b815260040161065e90612711565b8134146106a65760405162461bcd60e51b815260040161065e90612753565b6040805160028082526060820183526000926020830190803683375050600b54604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073491906127bf565b81600081518110610747576107476127dc565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061077b5761077b6127dc565b6001600160a01b0392831660209182029290920101526005546000916107a19116611044565b600b5460055460405163b6f9de9560e01b81529293506001600160a01b039182169263b6f9de959288926107e092600092899216904290600401612836565b6000604051808303818588803b1580156107f957600080fd5b505af115801561080d573d6000803e3d6000fd5b50506005546000935061082b92506001600160a01b03169050611044565b905060006108398383612881565b9450505050505b919050565b600080516020612c0583398151915233146108725760405162461bcd60e51b815260040161065e90612898565b6001600160a01b03811660009081526002602052604090205460ff16156108db5760405162461bcd60e51b815260206004820152601960248201527f45786368616e676520697320616c726561647920416464656400000000000000604482015260640161065e565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f3e535d1ab441ef41c268fd9b52b478aee02d693c5ca2a84b5d26b89e0922e5e191015b60405180910390a150565b60003361094481858561194a565b60019150505b92915050565b600061095e6012600a6129b1565b61096d9064e8d4a510006129c0565b905090565b600033610980858285611a6e565b61098b858585611ae8565b506001949350505050565b600080516020612c0583398151915233146109c35760405162461bcd60e51b815260040161065e90612898565b600554600160a01b900460ff16610a155760405162461bcd60e51b8152602060048201526016602482015275546178657320617265206e6f7420656e61626c65642160501b604482015260640161065e565b6005805460ff60a01b19169055565b600033610944818585610a3783836117fb565b610a4191906129df565b61194a565b600080516020612c058339815191523314610a735760405162461bcd60e51b815260040161065e90612898565b6005546001600160a01b0390811690821603610ac75760405162461bcd60e51b815260206004820152601360248201527257616c6c657420616c7265616479207365742160681b604482015260640161065e565b6005546001600160a01b031660009081526002602052604090205460ff1615610b0d576005546001600160a01b03166000908152600260205260409020805460ff191690555b6001600160a01b03166000818152600260205260409020805460ff19166001179055600580546001600160a01b0319169091179055565b600080516020612c058339815191523314610b715760405162461bcd60e51b815260040161065e90612898565b60035460046000828254610b8591906129df565b92505081905550600060038190555060075460066000828254610ba891906129df565b909155505060006007556040517f0dc54e328ceae48c6e5c5b350d3ee17166075e9866ff2ba8a6cf0f54e03ab1db90610c6b9060208082526064908201527f4368696c6c69656d616e206861732072656d6f7665642074686520446576656c60408201527f6f706d656e742054617820666f72207468697320746f6b656e202d20416c6c2060608201527f74617865732077696c6c206e6f7720676f20746f7761726473204c69717569646080820152636974792160e01b60a082015260c00190565b60405180910390a1565b600080516020612c058339815191523314610ca25760405162461bcd60e51b815260040161065e90612898565b426008541115610d005760405162461bcd60e51b815260206004820152602360248201527f596f752063616e6e6f7420756e6c6f636b20746865206c6971756964697479206044820152621e595d60ea1b606482015260840161065e565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d91906129f7565b905060008111610dbf5760405162461bcd60e51b815260206004820152601b60248201527f5468657265206973206e6f206c69717569646974792068657265210000000000604482015260640161065e565b600c5460405163a9059cbb60e01b8152600080516020612c058339815191526004820152602481018390526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190612a10565b90508015610ea657600c54604080516001600160a01b039092168252600080516020612c05833981519152602083015281018390527fae1e3f55a3bd49028dc8c60076591b54e799245355498a82b672a16a0561fadc9060600160405180910390a15b610eb26012600a6129b1565b610ec19064e8d4a510006129c0565b600a555050565b600080516020612c058339815191523314610ef55760405162461bcd60e51b815260040161065e90612898565b600060075411610f475760405162461bcd60e51b815260206004820152601d60248201527f4e6f20446576656c6f706d656e7420546178657320746f20636c61696d000000604482015260640161065e565b6000600654610f5530611044565b610f5f9190612881565b11610fc45760405162461bcd60e51b815260206004820152602f60248201527f42616c616e6365202d204c6971756964697479205374617368206973206e6f7460448201526e02067726561746572207468616e203608c1b606482015260840161065e565b600754600a54600090821115610fe657600a549150610fe38280612881565b90505b3061100081600080516020612c0583398151915285611ae8565b6007546040805185815260208101929092527f42c6f16da2484bdc9015ed92cc51fcc0195a7ce1f3aa91dc8743e87d055b7e4e910160405180910390a15060075550565b6001600160a01b031660009081526020819052604090205490565b600080516020612c05833981519152331461108c5760405162461bcd60e51b815260040161065e90612898565b6001600160a01b03811660009081526002602052604090205460ff166110f45760405162461bcd60e51b815260206004820152601760248201527f54686973206973206e6f7420616e2045786368616e6765000000000000000000604482015260640161065e565b306001600160a01b0382160361114c5760405162461bcd60e51b815260206004820152601960248201527f43616e742052656d6f7665205468697320616464726573732100000000000000604482015260640161065e565b620fadec196001600160a01b038216016111a85760405162461bcd60e51b815260206004820152601d60248201527f43616e742052656d6f766520746865204275726e204164647265737321000000604482015260640161065e565b600b546001600160a01b03908116908216036112065760405162461bcd60e51b815260206004820152601f60248201527f43616e742052656d6f76652074686520496e697469616c20526f757465722100604482015260640161065e565b600c546001600160a01b03908116908216036112645760405162461bcd60e51b815260206004820152601f60248201527f43616e742052656d6f766520746865204c697175696469747920506169722100604482015260640161065e565b6005546001600160a01b03908116908216036112c25760405162461bcd60e51b815260206004820152601f60248201527f43616e742052656d6f7665207468652057616c6c657420416464726573732100604482015260640161065e565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527ff50d0d312d501878616eb5e78ebf3ed6dcd3955aaef8165af9c6b057cc4832fb910161092b565b60408051600280825260608201835260009283929190602083019080368337019050509050308160008151811061134c5761134c6127dc565b6001600160a01b03928316602091820292909201810191909152600b54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c991906127bf565b816001815181106113dc576113dc6127dc565b6001600160a01b039283166020918202929092010152600b546040516307c0329d60e21b81526000929190911690631f00ca74906114209087908690600401612a32565b600060405180830381865afa15801561143d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114659190810190612a53565b90508060008151811061147a5761147a6127dc565b602002602001015192505050919050565b6000338161149982866117fb565b9050838110156114f95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161065e565b61098b828686840361194a565b600033610944818585611ae8565b6005546000906001600160a01b031633146115415760405162461bcd60e51b815260040161065e906126ce565b60055461155a906001600160a01b031630846000611e3c565b816006600082825461156c91906129df565b90915550506040518281527ff23ea100fcd99a68b8e110d1efba3254169c852518df5151cf37a155e8274cd19060200160405180910390a1506001919050565b600080516020612c0583398151915233146115d95760405162461bcd60e51b815260040161065e90612898565b600554600160a01b900460ff16156116335760405162461bcd60e51b815260206004820152601a60248201527f54617865732061726520616c726561647920656e61626c656421000000000000604482015260640161065e565b6005805460ff60a01b1916600160a01b179055565b6005546000906001600160a01b031633146116755760405162461bcd60e51b815260040161065e906126ce565b600082116116955760405162461bcd60e51b815260040161065e90612711565b600083116116f65760405162461bcd60e51b815260206004820152602860248201527f5472616e73616374696f6e20546f6b656e20416d6f756e742063616e6e6f74206044820152676265207a65726f2160c01b606482015260840161065e565b8134146117155760405162461bcd60e51b815260040161065e90612753565b600554839061172c906001600160a01b0316611044565b10156117865760405162461bcd60e51b815260206004820152602360248201527f4e6f7420456e6f75676820546f6b656e7320696e204368696c6c696557616c6c60448201526265742160e81b606482015260840161065e565b60055461179f906001600160a01b031630856000611e3c565b600554600b546000916117c1916001600160a01b03918216911660001961194a565b6117cb8484611f00565b90508091505080600660008282546117e391906129df565b9091555050600a54600654106109445761094461203b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60004260085461096d9190612881565b600080516020612c0583398151915233146118635760405162461bcd60e51b815260040161065e90612898565b600554600160a81b900460ff16156118cc5760405162461bcd60e51b815260206004820152602660248201527f4368696c6c69656d616e20697320616c72656164792061206e6f726d616c20746044820152653930b232b91760d11b606482015260840161065e565b6005805460ff60a81b1916600160a81b179055600080516020612c05833981519152600090815260026020527fd914d6ad20a85331496b3ddb97bf49529ec4bff403f5cb289d44f94c1d573066805460ff191690556040517f28a4e45d6ef9cbd8178def902a98d569ac659764e15fa4f9306a1fa93e1409e79190a1565b6001600160a01b0383166119ac5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161065e565b6001600160a01b038216611a0d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161065e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611a7a84846117fb565b90506000198114611ae25781811015611ad55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161065e565b611ae2848484840361194a565b50505050565b6001600160a01b038316611b4c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161065e565b6001600160a01b038216611bae5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161065e565b6001600160a01b03831660009081526020819052604090205481811015611c265760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161065e565b6000611c3184611044565b6001600160a01b03851660009081526002602052604090205490915060ff16611da357600554600160a01b900460ff1615611d0957600a54611c72846121ca565b611c7c90836129df565b1115611d045760405162461bcd60e51b815260206004820152604b60248201527f4163636f756e74732063616e206f6e6c79203125206f662074686520746f6b6560448201527f6e20737570706c792c2052656365697665722063616e6e6f742061636365707460648201526a103a3434b99036bab1b41760a91b608482015260a40161065e565b611da3565b600a54611d1684836129df565b1115611da35760405162461bcd60e51b815260206004820152605060248201527f4163636f756e74732063616e206f6e6c7920686f6c64203125206f662074686560448201527f20746f6b656e20737570706c792c2052656365697665722063616e6e6f74206160648201526f31b1b2b83a103a3434b99036bab1b41760811b608482015260a40161065e565b600a54600654108015908190611dbc575060095460ff16155b8015611dd65750600c546001600160a01b03878116911614155b15611de357611de361203b565b611dec856121e3565b80611dfb5750611dfb866121e3565b80611e105750600554600160a01b900460ff16155b15611e2757611e228686866000611e3c565b611e34565b611e348686866001611e3c565b505050505050565b818115611e5057611e4d8584612245565b90505b6001600160a01b03851660009081526020819052604081208054839290611e78908490612881565b90915550506001600160a01b03841660009081526020819052604081208054839290611ea59084906129df565b92505081905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ef191815260200190565b60405180910390a35050505050565b600b546000908190611f1f9030906001600160a01b031660001961194a565b600b5460405163f305d71960e01b81523060048201819052602482018790526000604483018190526064830181905260848301919091524260a483015291829182916001600160a01b03169063f305d71990889060c40160606040518083038185885af1158015611f94573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fb99190612b11565b919450925090506000611fcc8489612881565b90506000611fda8489612881565b9050611fea6301e13380426129df565b60085560408051848152602081018390529081018390527f9df1cf8d1b6a877505ac53e7cce14b5ec278aa7de33297d3b3cdd79f824b48bd9060600160405180910390a19890975095505050505050565b6009805460ff1916600117905560075460009061205730611044565b6120619190612881565b6040516391f98f3f60e01b815247600482015290915030906391f98f3f90602401602060405180830381865afa9250505080156120bb575060408051601f3d908101601f191682019092526120b8918101906129f7565b60015b61215d57600c5460408051630240bc6b60e21b815290516000926001600160a01b031691630902f1ac9160048083019260609291908290030181865afa158015612109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212d9190612b56565b50915050806001600160701b031647101561215757612155612150600284612ba6565b6123b2565b505b50612197565b81811015612195576000612172600283612ba6565b61217d600285612ba6565b6121879190612881565b9050612192816123b2565b50505b505b60006121b86007546121a830611044565b6121b29190612881565b47611f00565b60065550506009805460ff1916905550565b600060646121d9605a846129c0565b61094a9190612ba6565b60006001600160a01b038216600080516020612c058339815191521480156122155750600554600160a81b900460ff16155b8061222d57506005546001600160a01b038381169116145b8061094a57506001600160a01b038216301492915050565b60008061225183612527565b306000908152602081905260408120805492935083929091906122759084906129df565b90915550506001600160a01b038416600090815260208190526040812080548392906122a2908490612881565b9250508190555080600660008282546122bb91906129df565b90915550600090506122cc84612539565b9050801561233f5730600090815260208190526040812080548392906122f39084906129df565b90915550506001600160a01b03851660009081526020819052604081208054839290612320908490612881565b92505081905550806007600082825461233991906129df565b90915550505b600061234b82846129df565b905060006123598287612881565b9050306001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123a091815260200190565b60405180910390a39695505050505050565b600b546000906123cf9030906001600160a01b031660001961194a565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612404576124046127dc565b6001600160a01b03928316602091820292909201810191909152600b54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561245d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248191906127bf565b81600181518110612494576124946127dc565b6001600160a01b039283166020918202929092010152600b5460405163791ac94760e01b81524792919091169063791ac947906124de908790600090879030904290600401612bc8565b600060405180830381600087803b1580156124f857600080fd5b505af115801561250c573d6000803e3d6000fd5b5047925061251e915083905082612881565b95945050505050565b60006064600454836121d991906129c0565b60035460009015612554576064600354836121d991906129c0565b506000919050565b60006020828403121561256e57600080fd5b5035919050565b6001600160a01b038116811461258a57600080fd5b50565b60006020828403121561259f57600080fd5b81356125aa81612575565b9392505050565b600060208083528351808285015260005b818110156125de578581018301518582016040015282016125c2565b818111156125f0576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561261957600080fd5b823561262481612575565b946020939093013593505050565b60008060006060848603121561264757600080fd5b833561265281612575565b9250602084013561266281612575565b929592945050506040919091013590565b6000806040838503121561268657600080fd5b50508035926020909101359150565b600080604083850312156126a857600080fd5b82356126b381612575565b915060208301356126c381612575565b809150509250929050565b60208082526023908201527f44656e6965643a2063616c6c6572206973206e6f74204368696c6c696557616c6040820152621b195d60ea1b606082015260800190565b60208082526022908201527f5472616e73616374696f6e20416d6f756e742063616e6e6f74206265207a65726040820152616f2160f01b606082015260800190565b60208082526036908201527f5472616e73616374696f6e20416d6f756e7420697320646966666572656e74206040820152757468616e20746865204554482050726f76696465642160501b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156127d157600080fd5b81516125aa81612575565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561282b5781516001600160a01b031687529582019590820190600101612806565b509495945050505050565b84815260806020820152600061284f60808301866127f2565b6001600160a01b03949094166040830152506060015292915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156128935761289361286b565b500390565b6020808252818101527f44656e6965643a2063616c6c6572206973206e6f74204368696c6c69656d616e604082015260600190565b600181815b808511156129085781600019048211156128ee576128ee61286b565b808516156128fb57918102915b93841c93908002906128d2565b509250929050565b60008261291f5750600161094a565b8161292c5750600061094a565b8160018114612942576002811461294c57612968565b600191505061094a565b60ff84111561295d5761295d61286b565b50506001821b61094a565b5060208310610133831016604e8410600b841016171561298b575081810a61094a565b61299583836128cd565b80600019048211156129a9576129a961286b565b029392505050565b60006125aa60ff841683612910565b60008160001904831182151516156129da576129da61286b565b500290565b600082198211156129f2576129f261286b565b500190565b600060208284031215612a0957600080fd5b5051919050565b600060208284031215612a2257600080fd5b815180151581146125aa57600080fd5b828152604060208201526000612a4b60408301846127f2565b949350505050565b60006020808385031215612a6657600080fd5b825167ffffffffffffffff80821115612a7e57600080fd5b818501915085601f830112612a9257600080fd5b815181811115612aa457612aa46127a9565b8060051b604051601f19603f83011681018181108582111715612ac957612ac96127a9565b604052918252848201925083810185019188831115612ae757600080fd5b938501935b82851015612b0557845184529385019392850192612aec565b98975050505050505050565b600080600060608486031215612b2657600080fd5b8351925060208401519150604084015190509250925092565b80516001600160701b038116811461084057600080fd5b600080600060608486031215612b6b57600080fd5b612b7484612b3f565b9250612b8260208501612b3f565b9150604084015163ffffffff81168114612b9b57600080fd5b809150509250925092565b600082612bc357634e487b7160e01b600052601260045260246000fd5b500490565b85815284602082015260a060408201526000612be760a08301866127f2565b6001600160a01b039490941660608301525060800152939250505056fe000000000000000000000000775e3bbfb07496db8ed33a86df0e41345f11ea21a2646970667358221220f64dd307864af61103d042c362ef65e248d271dc1cdf88a563a34bd8c400106064736f6c634300080f0033";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CHILLIEADDEXCHANGE = "chillieAddExchange";

    public static final String FUNC_CHILLIEBAKEDADDRESS = "chillieBakedAddress";

    public static final String FUNC_CHILLIECLAIMDEVELOPMENTTAX = "chillieClaimDevelopmentTax";

    public static final String FUNC_CHILLIEDISCONTINUEDEVTAXES = "chillieDiscontinueDevTaxes";

    public static final String FUNC_CHILLIEREMOVEEXCHANGE = "chillieRemoveExchange";

    public static final String FUNC_CHILLIERESUMETAXES = "chillieResumeTaxes";

    public static final String FUNC_CHILLIESETWALLETADDRESS = "chillieSetWalletAddress";

    public static final String FUNC_CHILLIESUSPENDTAXES = "chillieSuspendTaxes";

    public static final String FUNC_CHILLIETOSTANDARDACCOUNT = "chillieToStandardAccount";

    public static final String FUNC_CHILLIEWALLETADDRESS = "chillieWalletAddress";

    public static final String FUNC_CHILLIEMAN = "chillieman";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_DEVSTASH = "devStash";

    public static final String FUNC_GETSECONDSUNTILLIQUIDITYUNLOCKTIME = "getSecondsUntilLiquidityUnlockTime";

    public static final String FUNC_HOWMANYTOKENSSOLDTOGET = "howManyTokensSoldToGet";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_ISCHILLIEMANREQUIREDTOPAYTAX = "isChilliemanRequiredToPayTax";

    public static final String FUNC_ISTAXENABLED = "isTaxEnabled";

    public static final String FUNC_LIQUIDITYSTASH = "liquidityStash";

    public static final String FUNC_MAXTOKENAMOUNT = "maxTokenAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNISWAPV2PAIR = "uniswapV2Pair";

    public static final String FUNC_UNISWAPV2ROUTER = "uniswapV2Router";

    public static final String FUNC_UNLOCKLIQUIDITY = "unlockLiquidity";

    public static final String FUNC_WALLETADDLIQUIDITY = "walletAddLiquidity";

    public static final String FUNC_WALLETADDTOLIQUIDITYSTASH = "walletAddToLiquidityStash";

    public static final String FUNC_WALLETBUYTOKENS = "walletBuyTokens";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CHILLIEMANISNOWLIMITED_EVENT = new Event("ChilliemanIsNowLimited", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event DEVCLAIMERROR_EVENT = new Event("DevClaimError", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event DEVTAXESCLAIMED_EVENT = new Event("DevTaxesClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEVTAXESREMOVED_EVENT = new Event("DevTaxesRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event EXCHANGEADDED_EVENT = new Event("ExchangeAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event EXCHANGEREMOVED_EVENT = new Event("ExchangeRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event LIQUDIDITYPURCHASED_EVENT = new Event("LiqudidityPurchased", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIQUIDITIYADDEDFROMWALLET_EVENT = new Event("LiquiditiyAddedFromWallet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LIQUIDITYACCOUNTINGERROR_EVENT = new Event("LiquidityAccountingError", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIQUIDITYUNLOCKED_EVENT = new Event("LiquidityUnlocked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected ChillieToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ChillieToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ChillieToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ChillieToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ChilliemanIsNowLimitedEventResponse> getChilliemanIsNowLimitedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHILLIEMANISNOWLIMITED_EVENT, transactionReceipt);
        ArrayList<ChilliemanIsNowLimitedEventResponse> responses = new ArrayList<ChilliemanIsNowLimitedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChilliemanIsNowLimitedEventResponse typedResponse = new ChilliemanIsNowLimitedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChilliemanIsNowLimitedEventResponse> chilliemanIsNowLimitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChilliemanIsNowLimitedEventResponse>() {
            @Override
            public ChilliemanIsNowLimitedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHILLIEMANISNOWLIMITED_EVENT, log);
                ChilliemanIsNowLimitedEventResponse typedResponse = new ChilliemanIsNowLimitedEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<ChilliemanIsNowLimitedEventResponse> chilliemanIsNowLimitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHILLIEMANISNOWLIMITED_EVENT));
        return chilliemanIsNowLimitedEventFlowable(filter);
    }

    public List<DevClaimErrorEventResponse> getDevClaimErrorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEVCLAIMERROR_EVENT, transactionReceipt);
        ArrayList<DevClaimErrorEventResponse> responses = new ArrayList<DevClaimErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DevClaimErrorEventResponse typedResponse = new DevClaimErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actualAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DevClaimErrorEventResponse> devClaimErrorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DevClaimErrorEventResponse>() {
            @Override
            public DevClaimErrorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEVCLAIMERROR_EVENT, log);
                DevClaimErrorEventResponse typedResponse = new DevClaimErrorEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.actualAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DevClaimErrorEventResponse> devClaimErrorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEVCLAIMERROR_EVENT));
        return devClaimErrorEventFlowable(filter);
    }

    public List<DevTaxesClaimedEventResponse> getDevTaxesClaimedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEVTAXESCLAIMED_EVENT, transactionReceipt);
        ArrayList<DevTaxesClaimedEventResponse> responses = new ArrayList<DevTaxesClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DevTaxesClaimedEventResponse typedResponse = new DevTaxesClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amountClaimed = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DevTaxesClaimedEventResponse> devTaxesClaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DevTaxesClaimedEventResponse>() {
            @Override
            public DevTaxesClaimedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEVTAXESCLAIMED_EVENT, log);
                DevTaxesClaimedEventResponse typedResponse = new DevTaxesClaimedEventResponse();
                typedResponse.log = log;
                typedResponse.amountClaimed = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DevTaxesClaimedEventResponse> devTaxesClaimedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEVTAXESCLAIMED_EVENT));
        return devTaxesClaimedEventFlowable(filter);
    }

    public List<DevTaxesRemovedEventResponse> getDevTaxesRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEVTAXESREMOVED_EVENT, transactionReceipt);
        ArrayList<DevTaxesRemovedEventResponse> responses = new ArrayList<DevTaxesRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DevTaxesRemovedEventResponse typedResponse = new DevTaxesRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DevTaxesRemovedEventResponse> devTaxesRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DevTaxesRemovedEventResponse>() {
            @Override
            public DevTaxesRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEVTAXESREMOVED_EVENT, log);
                DevTaxesRemovedEventResponse typedResponse = new DevTaxesRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DevTaxesRemovedEventResponse> devTaxesRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEVTAXESREMOVED_EVENT));
        return devTaxesRemovedEventFlowable(filter);
    }

    public List<ExchangeAddedEventResponse> getExchangeAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGEADDED_EVENT, transactionReceipt);
        ArrayList<ExchangeAddedEventResponse> responses = new ArrayList<ExchangeAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExchangeAddedEventResponse typedResponse = new ExchangeAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExchangeAddedEventResponse> exchangeAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExchangeAddedEventResponse>() {
            @Override
            public ExchangeAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGEADDED_EVENT, log);
                ExchangeAddedEventResponse typedResponse = new ExchangeAddedEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExchangeAddedEventResponse> exchangeAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGEADDED_EVENT));
        return exchangeAddedEventFlowable(filter);
    }

    public List<ExchangeRemovedEventResponse> getExchangeRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGEREMOVED_EVENT, transactionReceipt);
        ArrayList<ExchangeRemovedEventResponse> responses = new ArrayList<ExchangeRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExchangeRemovedEventResponse typedResponse = new ExchangeRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExchangeRemovedEventResponse> exchangeRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExchangeRemovedEventResponse>() {
            @Override
            public ExchangeRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGEREMOVED_EVENT, log);
                ExchangeRemovedEventResponse typedResponse = new ExchangeRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExchangeRemovedEventResponse> exchangeRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGEREMOVED_EVENT));
        return exchangeRemovedEventFlowable(filter);
    }

    public List<LiqudidityPurchasedEventResponse> getLiqudidityPurchasedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUDIDITYPURCHASED_EVENT, transactionReceipt);
        ArrayList<LiqudidityPurchasedEventResponse> responses = new ArrayList<LiqudidityPurchasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LiqudidityPurchasedEventResponse typedResponse = new LiqudidityPurchasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.liquidityTokensReceived = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ethRemaining = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokensRemaining = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiqudidityPurchasedEventResponse> liqudidityPurchasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiqudidityPurchasedEventResponse>() {
            @Override
            public LiqudidityPurchasedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUDIDITYPURCHASED_EVENT, log);
                LiqudidityPurchasedEventResponse typedResponse = new LiqudidityPurchasedEventResponse();
                typedResponse.log = log;
                typedResponse.liquidityTokensReceived = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ethRemaining = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokensRemaining = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiqudidityPurchasedEventResponse> liqudidityPurchasedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUDIDITYPURCHASED_EVENT));
        return liqudidityPurchasedEventFlowable(filter);
    }

    public List<LiquiditiyAddedFromWalletEventResponse> getLiquiditiyAddedFromWalletEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUIDITIYADDEDFROMWALLET_EVENT, transactionReceipt);
        ArrayList<LiquiditiyAddedFromWalletEventResponse> responses = new ArrayList<LiquiditiyAddedFromWalletEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LiquiditiyAddedFromWalletEventResponse typedResponse = new LiquiditiyAddedFromWalletEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiquiditiyAddedFromWalletEventResponse> liquiditiyAddedFromWalletEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiquiditiyAddedFromWalletEventResponse>() {
            @Override
            public LiquiditiyAddedFromWalletEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUIDITIYADDEDFROMWALLET_EVENT, log);
                LiquiditiyAddedFromWalletEventResponse typedResponse = new LiquiditiyAddedFromWalletEventResponse();
                typedResponse.log = log;
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiquiditiyAddedFromWalletEventResponse> liquiditiyAddedFromWalletEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUIDITIYADDEDFROMWALLET_EVENT));
        return liquiditiyAddedFromWalletEventFlowable(filter);
    }

    public List<LiquidityAccountingErrorEventResponse> getLiquidityAccountingErrorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUIDITYACCOUNTINGERROR_EVENT, transactionReceipt);
        ArrayList<LiquidityAccountingErrorEventResponse> responses = new ArrayList<LiquidityAccountingErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LiquidityAccountingErrorEventResponse typedResponse = new LiquidityAccountingErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actualAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiquidityAccountingErrorEventResponse> liquidityAccountingErrorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiquidityAccountingErrorEventResponse>() {
            @Override
            public LiquidityAccountingErrorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUIDITYACCOUNTINGERROR_EVENT, log);
                LiquidityAccountingErrorEventResponse typedResponse = new LiquidityAccountingErrorEventResponse();
                typedResponse.log = log;
                typedResponse.message = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.expectedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.actualAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiquidityAccountingErrorEventResponse> liquidityAccountingErrorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUIDITYACCOUNTINGERROR_EVENT));
        return liquidityAccountingErrorEventFlowable(filter);
    }

    public List<LiquidityUnlockedEventResponse> getLiquidityUnlockedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUIDITYUNLOCKED_EVENT, transactionReceipt);
        ArrayList<LiquidityUnlockedEventResponse> responses = new ArrayList<LiquidityUnlockedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LiquidityUnlockedEventResponse typedResponse = new LiquidityUnlockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pairAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiquidityUnlockedEventResponse> liquidityUnlockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiquidityUnlockedEventResponse>() {
            @Override
            public LiquidityUnlockedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUIDITYUNLOCKED_EVENT, log);
                LiquidityUnlockedEventResponse typedResponse = new LiquidityUnlockedEventResponse();
                typedResponse.log = log;
                typedResponse.pairAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiquidityUnlockedEventResponse> liquidityUnlockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUIDITYUNLOCKED_EVENT));
        return liquidityUnlockedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieAddExchange(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIEADDEXCHANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> chillieBakedAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHILLIEBAKEDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieClaimDevelopmentTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIECLAIMDEVELOPMENTTAX, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieDiscontinueDevTaxes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIEDISCONTINUEDEVTAXES, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieRemoveExchange(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIEREMOVEEXCHANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieResumeTaxes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIERESUMETAXES, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieSetWalletAddress(String walletAddess) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIESETWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, walletAddess)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieSuspendTaxes() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIESUSPENDTAXES, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> chillieToStandardAccount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHILLIETOSTANDARDACCOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> chillieWalletAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHILLIEWALLETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> chillieman() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHILLIEMAN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DECREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> devStash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEVSTASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getSecondsUntilLiquidityUnlockTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSECONDSUNTILLIQUIDITYUNLOCKTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> howManyTokensSoldToGet(BigInteger ethAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HOWMANYTOKENSSOLDTOGET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ethAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREASEALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isChilliemanRequiredToPayTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISCHILLIEMANREQUIREDTOPAYTAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isTaxEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISTAXENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> liquidityStash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIQUIDITYSTASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> maxTokenAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uniswapV2Pair() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNISWAPV2PAIR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> uniswapV2Router() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNISWAPV2ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unlockLiquidity() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCKLIQUIDITY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> walletAddLiquidity(BigInteger tokenAmount, BigInteger ethAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WALLETADDLIQUIDITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(ethAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> walletAddToLiquidityStash(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WALLETADDTOLIQUIDITYSTASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> walletBuyTokens(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WALLETBUYTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ChillieToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChillieToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ChillieToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChillieToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ChillieToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ChillieToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ChillieToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ChillieToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ChillieToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ChillieToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<ChillieToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ChillieToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ChillieToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ChillieToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ChillieToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ChillieToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class ChilliemanIsNowLimitedEventResponse extends BaseEventResponse {
    }

    public static class DevClaimErrorEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger expectedAmount;

        public BigInteger actualAmount;
    }

    public static class DevTaxesClaimedEventResponse extends BaseEventResponse {
        public BigInteger amountClaimed;

        public BigInteger expectedAmount;
    }

    public static class DevTaxesRemovedEventResponse extends BaseEventResponse {
        public String message;
    }

    public static class ExchangeAddedEventResponse extends BaseEventResponse {
        public String exchangeAddress;
    }

    public static class ExchangeRemovedEventResponse extends BaseEventResponse {
        public String exchangeAddress;
    }

    public static class LiqudidityPurchasedEventResponse extends BaseEventResponse {
        public BigInteger liquidityTokensReceived;

        public BigInteger ethRemaining;

        public BigInteger tokensRemaining;
    }

    public static class LiquiditiyAddedFromWalletEventResponse extends BaseEventResponse {
        public BigInteger tokenAmount;
    }

    public static class LiquidityAccountingErrorEventResponse extends BaseEventResponse {
        public String message;

        public BigInteger expectedAmount;

        public BigInteger actualAmount;
    }

    public static class LiquidityUnlockedEventResponse extends BaseEventResponse {
        public String pairAddress;

        public String to;

        public BigInteger amount;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
